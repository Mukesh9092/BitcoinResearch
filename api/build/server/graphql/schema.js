

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports.default = '\nscalar Date\n\ntype Article {\n  id: String!\n  title: String!\n  slug: String!\n  body: String!\n  created: Date!\n  updated: Date!\n  user: User!\n  comments: [Comment]\n  tags: [Tag]\n}\n\ntype Comment {\n  id: String!\n  body: String!\n  created: Date!\n  updated: Date!\n  user: User!\n  article: Article!\n}\n\ntype Tag {\n  id: String!\n  label: String!\n  articles: [Article]\n}\n\ntype User {\n  id: String!\n  email: String!\n  username: String!\n  articles: [Article]\n  comments: [Comment]\n  session: Session\n}\n\ntype Session {\n  id: String!\n  user: User!\n}\n\n# the schema allows the following query:\ntype Query {\n  articles(offset: Int!, limit: Int!): [Article]\n  articlesByUser(username: String!, offset: Int!, limit: Int!): [Article]\n  articlesByTag(tag: String!, offset: Int!, limit: Int!): [Article]\n  articleById(id: String!): Article\n  articleBySlug(slug: String!): Article\n\n  tags: [Tag]\n\n  users: [User]\n  userById(id: String!): User\n  userByEmail(email: String!): User\n  userByUsername(username: String!): User\n}\n\ntype Mutation {\n  sessionWithEmail(email: String!, password: String!): Session\n}\n\n# we need to tell the server which types represent the root query\n# and root mutation types. We call them RootQuery and RootMutation by convention.\nschema {\n  query: Query\n  mutation: Mutation\n}\n';
