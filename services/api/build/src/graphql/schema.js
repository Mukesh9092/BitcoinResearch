"use strict";
var schema = "\n  scalar Date\n\n  type Currency {\n    key: String!\n    name: String!\n    txFee:  String!\n    minConf: Int!\n  }\n\n  type CurrencyPairVolume {\n    currencyAVolume: String!\n    currencyBVolume: String!\n  }\n\n  type CurrencyPair {\n    id: String!\n    key: String!\n    currencyA: Currency!\n    currencyB: Currency!\n    volume24h: CurrencyPairVolume!\n  }\n\n  type OrderBook {\n    currencyA: Currency!\n    currencyB: Currency!\n    asks: [OrderBookEntry]\n    bids: [OrderBookEntry]\n  }\n\n  type OrderBookEntry {\n    price: Float!\n    amount: Int!\n  }\n\n  type Candlestick {\n    id: Date!\n    currencyA: Currency!\n    currencyB: Currency!\n    high: Float!\n    low: Float!\n    open: Float!\n    close: Float!\n    volume: Float!\n    quoteVolume: Float!\n    weightedAverage: Float!\n  }\n\n  type LoanOrders {\n    offers: [LoanOrder]\n    demands: [LoanOrder]\n  }\n\n  type LoanOrder {\n    rate: Float!\n    amount: Float!\n    rangeMin: Int!\n    rangeMax: Int!\n  }\n\n  type User {\n    id: String!\n    email: String!\n    username: String!\n  }\n\n  type Session {\n    token: String!\n    ttl: Int!\n    user: User!\n  }\n\n  type RootQuery {\n    users: [User]\n    userById(id: String!): User\n    userByEmail(email: String!): User\n\n    currencyPairs: [CurrencyPair]\n    currencyById(id: Int!): Currency\n\n    candlesticks(currencyA: String!, currencyB: String!, period: Int!, start: Date!, end: Date!): [Candlestick]\n  }\n\n  type RootMutation {\n    loginWithEmailPassword(email: String!, password: String!): Session\n  }\n\n  schema {\n    query: RootQuery\n    mutation: RootMutation\n  }\n";
module.exports = schema;
//# sourceMappingURL=schema.js.map