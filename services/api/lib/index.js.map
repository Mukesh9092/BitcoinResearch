{"version":3,"sources":["common/environment.ts","common/apollo/client.js","importer/mutations/createUserWithDashboard.ts","importer/mutations/deleteManyCharts.ts","importer/queries/getUserIds.ts","importer/ensure-initial-data.ts","resolvers/Query/getMarkets.ts","resolvers/Query/index.ts","resolvers/index.ts","index.ts"],"names":["isBrowser","Boolean","window","isServer","isDevelopment","process","env","NODE_ENV","isProduction","dotenv","config","API_HOST","API_PORT","getApolloClient","options","server","cache","InMemoryCache","uri","restore","__APOLLO_STATE__","link","HttpLink","fetch","client","ApolloClient","ssrMode","createUserWithDashboard","gql","deleteManyCharts","getUserIds","PRISMA_HOST","PRISMA_PORT","ensureInitialData","console","log","apolloClient","usersResult","query","usersExist","users","data","length","mutate","mutation","createUserWithDashboardResult","variables","name","MARKETSTORE_API_HOST","MARKETSTORE_API_PORT","quote","_parent","_args","_context","_info","host","url","fetchResult","fetchResultText","text","output","JSON","parse","map","base","getMarkets","Query","APP_PORT_IN","Number","String","resolvers","resolversModule","typeDefs","context","req","prisma","Prisma","endpoint","debug","apolloServer","ApolloServer","main","listen","port","error"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["export function isBrowser() {\n  return Boolean(typeof window !== 'undefined')\n}\n\nexport function isServer() {\n  return Boolean(typeof window === 'undefined')\n}\n\nexport function isDevelopment() {\n  return Boolean(process.env.NODE_ENV === 'develop')\n}\n\nexport function isProduction() {\n  return Boolean(process.env.NODE_ENV === 'production')\n}\n","import dotenv from 'dotenv'\nimport fetch from 'cross-fetch'\nimport { memoize } from 'lodash'\n\nimport ApolloClient from 'apollo-client'\nimport { HttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nimport { isServer } from '../environment'\n\ndotenv.config()\n\nconst { API_HOST, API_PORT } = process.env\n\nexport const getApolloClient = memoize((options = {}) => {\n  const server = isServer()\n  const cache = options.cache || new InMemoryCache()\n  const uri = options.uri || (server && `http://${API_HOST}:${API_PORT}/`) || `http://api.localtest.me`\n\n  if (!server) {\n    // eslint-disable-next-line no-underscore-dangle\n    cache.restore(window.__APOLLO_STATE__)\n  }\n\n  const link = options.link || new HttpLink({ uri, fetch })\n\n  const client = new ApolloClient({\n    cache,\n    link,\n    ssrMode: isServer(),\n  })\n\n  return client\n})\n","import gql from 'graphql-tag'\n\nexport const createUserWithDashboard = gql`\n  mutation createUserWithDashboard($name: String!) {\n    createUser(data: { name: $name, dashboard: { create: {} } }) {\n      id\n      name\n      dashboard {\n        id\n      }\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const deleteManyCharts = gql`\n  mutation {\n    deleteManyCharts(where: {}) {\n      count\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const getUserIds = gql`\n  query {\n    users {\n      id\n    }\n  }\n`\n","import dotenv from 'dotenv'\nimport { getApolloClient } from '../common/apollo/client'\nimport { createUserWithDashboard } from './mutations/createUserWithDashboard'\nimport { deleteManyCharts } from './mutations/deleteManyCharts'\nimport { getUserIds } from './queries/getUserIds'\n\ndotenv.config()\n\nconst { PRISMA_HOST, PRISMA_PORT } = process.env\n\nexport async function ensureInitialData() {\n  console.log('ensureInitialData')\n\n  const apolloClient = getApolloClient({\n    uri: `http://${PRISMA_HOST}:${PRISMA_PORT}`,\n  })\n\n  const usersResult = await apolloClient.query({ query: getUserIds })\n  const usersExist = usersResult?.data?.users?.length > 0\n\n  if (usersExist) {\n    console.log('ensureInitialData users exist, removing charts')\n\n    await apolloClient.mutate({ mutation: deleteManyCharts })\n\n    console.log('ensureInitialData charts removed')\n  } else {\n    console.log('ensureInitialData creating new users')\n\n    const createUserWithDashboardResult = await apolloClient.mutate({\n      mutation: createUserWithDashboard,\n      variables: {\n        name: 'admin',\n      },\n    })\n\n    console.log('ensureInitialData createUserWithDashboardResult', createUserWithDashboardResult)\n  }\n\n  console.log('ensureInitialData done')\n}\n","const { MARKETSTORE_API_HOST, MARKETSTORE_API_PORT } = process.env\n\n// TODO: Get from somewhere.\nconst quote = 'BTC'\n\nexport default async (_parent: any, _args: any, _context: any, _info: any) => {\n  const host = MARKETSTORE_API_HOST\n  const port = MARKETSTORE_API_PORT\n  const url = `http://${host}:${port}/markets`\n\n  const fetchResult = await fetch(url)\n  // console.log('getMarkets fetchResult', fetchResult)\n\n  const fetchResultText = await fetchResult.text()\n  // console.log(`getMarkets fetchResultText \"${fetchResultText}\"`, typeof fetchResultText)\n\n  const fetchResultJSON = JSON.parse(fetchResultText)\n  // console.log('getMarkets fetchResultJSON', fetchResultJSON)\n\n  const output = fetchResultJSON.map((base: string) => {\n    return {\n      base,\n      quote,\n    }\n  })\n  // console.log('getMarkets output', output)\n\n  return output\n}\n","// import getChartById from './getChartById'\n// import getCurrentUser from './getCurrentUser'\n// import getDashboard from './getDashboard'\nimport getMarkets from './getMarkets'\n// import getOHLCVs from './getOHLCVs'\n\nexport default {\n  // getChartById,\n  // getCurrentUser,\n  // getDashboard,\n  getMarkets,\n  // getOHLCVs,\n}\n","// import Chart from './Chart'\n// import Mutation from './Mutation'\n// import Market from './Market'\nimport Query from './Query'\n\nexport default {\n  // Chart,\n  // Mutation,\n  // Market,\n  Query\n}\n","import { ApolloServer } from 'apollo-server'\nimport { ContextFunction } from 'apollo-server-core'\nimport dotenv from 'dotenv'\nimport { importSchema } from 'graphql-import'\nimport { Prisma } from 'prisma-binding'\nimport { ensureInitialData } from './importer/ensure-initial-data'\nimport resolversModule from './resolvers'\n\ndotenv.config()\n\nconst APP_PORT_IN = Number(process.env.APP_PORT_IN)\nconst PRISMA_HOST = String(process.env.PRISMA_HOST)\nconst PRISMA_PORT = Number(process.env.PRISMA_PORT)\n\n// Type Checked Resolvers.\nconst resolvers = resolversModule\n\nconst typeDefs = importSchema('./src/datamodel.graphql')\n\nconst context: ContextFunction = (req) => {\n  return {\n    ...req,\n    prisma: new Prisma({\n      typeDefs: 'src/datamodel.prisma.gen.graphql',\n      endpoint: `http://${PRISMA_HOST}:${PRISMA_PORT}`,\n      debug: true,\n    }),\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context,\n})\n\nconst main = async () => {\n  try {\n    const { url } = await apolloServer.listen({\n      port: APP_PORT_IN,\n    })\n\n    console.log(`GraphQL server is running on ${url}`)\n\n    await ensureInitialData()\n\n    console.log(`Seeded initial data`)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nmain()\n"]}