{"version":3,"sources":["context.ts","common/environment.ts","common/apollo/client.js","importer/mutations/createUserWithDashboard.ts","importer/queries/getUserIds.ts","importer/ensure-initial-data.ts","resolvers/Query/getMarkets.ts","resolvers/Query/index.ts","resolvers/index.ts","index.ts"],"names":["PRISMA_HOST","String","process","env","PRISMA_PORT","Number","prismaClientOptions","typeDefs","endpoint","debug","context","req","prisma","Prisma","isBrowser","Boolean","window","isServer","isDevelopment","NODE_ENV","isProduction","dotenv","config","API_HOST","API_PORT","getApolloClient","options","server","cache","InMemoryCache","uri","restore","__APOLLO_STATE__","link","HttpLink","fetch","client","ApolloClient","ssrMode","createUserWithDashboard","gql","getUserIds","ensureInitialData","console","log","apolloClient","usersResult","query","usersExist","data","users","length","createUserWithDashboardResult","mutate","mutation","variables","name","MARKETSTORE_API_HOST","MARKETSTORE_API_PORT","quote","_parent","_args","_context","_info","host","port","url","fetchResult","fetchResultText","text","fetchResultJSON","JSON","parse","output","map","base","getMarkets","Query","main","API_PORT_IN","apolloServer","ApolloServer","resolvers","listen","error"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import { ContextFunction } from 'apollo-server-core'\nimport { Prisma } from 'prisma-binding'\n\nconst PRISMA_HOST = String(process.env.PRISMA_HOST)\nconst PRISMA_PORT = Number(process.env.PRISMA_PORT)\n\nconst prismaClientOptions = {\n  typeDefs: 'src/datamodel.prisma.gen.graphql',\n  endpoint: `http://${PRISMA_HOST}:${PRISMA_PORT}`,\n  debug: true,\n}\n\nconst context: ContextFunction = (req) => {\n  return {\n    ...req,\n    prisma: new Prisma(prismaClientOptions),\n  }\n}\n\nexport default context\n","export function isBrowser() {\n  return Boolean(typeof window !== 'undefined')\n}\n\nexport function isServer() {\n  return Boolean(typeof window === 'undefined')\n}\n\nexport function isDevelopment() {\n  return Boolean(process.env.NODE_ENV === 'develop')\n}\n\nexport function isProduction() {\n  return Boolean(process.env.NODE_ENV === 'production')\n}\n","import dotenv from 'dotenv'\nimport fetch from 'cross-fetch'\nimport { memoize } from 'lodash'\n\nimport ApolloClient from 'apollo-client'\nimport { HttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nimport { isServer } from '../environment'\n\ndotenv.config()\n\nconst { API_HOST, API_PORT } = process.env\n\nexport const getApolloClient = memoize((options = {}) => {\n  const server = isServer()\n  const cache = options.cache || new InMemoryCache()\n  const uri = options.uri || (server && `http://${API_HOST}:${API_PORT}/`) || `http://api.localtest.me`\n\n  if (!server) {\n    // eslint-disable-next-line no-underscore-dangle\n    cache.restore(window.__APOLLO_STATE__)\n  }\n\n  const link = options.link || new HttpLink({ uri, fetch })\n\n  const client = new ApolloClient({\n    cache,\n    link,\n    ssrMode: isServer(),\n  })\n\n  return client\n})\n","import gql from 'graphql-tag'\n\nexport const createUserWithDashboard = gql`\n  mutation createUserWithDashboard($name: String!) {\n    createUser(data: { name: $name, dashboard: { create: {} } }) {\n      id\n      name\n      dashboard {\n        id\n      }\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const getUserIds = gql`\n  query {\n    users {\n      id\n    }\n  }\n`\n","import dotenv from 'dotenv'\nimport { getApolloClient } from '../common/apollo/client'\nimport { createUserWithDashboard } from './mutations/createUserWithDashboard'\nimport { getUserIds } from './queries/getUserIds'\n\ndotenv.config()\n\nconst { PRISMA_HOST, PRISMA_PORT } = process.env\n\nexport async function ensureInitialData() {\n  console.log('ensureInitialData')\n\n  const apolloClient = getApolloClient({\n    uri: `http://${PRISMA_HOST}:${PRISMA_PORT}`,\n  })\n\n  const usersResult = await apolloClient.query({ query: getUserIds })\n  const usersExist = usersResult?.data?.users?.length > 0\n\n  if (usersExist) {\n    // console.log('ensureInitialData users exist, removing charts')\n    // await apolloClient.mutate({ mutation: deleteManyCharts })\n    // console.log('ensureInitialData charts removed')\n  } else {\n    console.log('ensureInitialData creating new users')\n\n    const createUserWithDashboardResult = await apolloClient.mutate({\n      mutation: createUserWithDashboard,\n      variables: {\n        name: 'admin',\n      },\n    })\n\n    console.log('ensureInitialData createUserWithDashboardResult', createUserWithDashboardResult)\n  }\n\n  console.log('ensureInitialData done')\n}\n","const { MARKETSTORE_API_HOST, MARKETSTORE_API_PORT } = process.env\n\n// TODO: Get from somewhere.\nconst quote = 'BTC'\n\nexport default async (_parent: any, _args: any, _context: any, _info: any) => {\n  const host = MARKETSTORE_API_HOST\n  const port = MARKETSTORE_API_PORT\n  const url = `http://${host}:${port}/markets`\n  console.log('getMarkets:url', url)\n\n  const fetchResult = await fetch(url)\n  console.log('getMarkets:fetchResult', fetchResult)\n\n  const fetchResultText = await fetchResult.text()\n  console.log(`getMarkets:fetchResultText \"${fetchResultText}\"`, typeof fetchResultText)\n\n  const fetchResultJSON = JSON.parse(fetchResultText)\n  console.log('getMarkets:fetchResultJSON', fetchResultJSON)\n\n  const output = fetchResultJSON.map((base: string) => {\n    return {\n      base,\n      quote,\n    }\n  })\n  console.log('getMarkets:output', output)\n\n  return output\n}\n","// import getChartById from './getChartById'\n// import getCurrentUser from './getCurrentUser'\n// import getDashboard from './getDashboard'\nimport getMarkets from './getMarkets'\n// import getOHLCVs from './getOHLCVs'\n\nexport default {\n  // getChartById,\n  // getCurrentUser,\n  // getDashboard,\n  getMarkets,\n  // getOHLCVs,\n}\n","// import Chart from './Chart'\n// import Mutation from './Mutation'\n// import Market from './Market'\nimport Query from './Query'\n\nexport default {\n  // Chart,\n  // Mutation,\n  // Market,\n  Query\n}\n","import { ApolloServer } from 'apollo-server'\nimport dotenv from 'dotenv'\nimport { importSchema } from 'graphql-import'\nimport context from './context'\nimport { ensureInitialData } from './importer/ensure-initial-data'\nimport resolvers from './resolvers'\n\ndotenv.config()\n\nconst main = async () => {\n  try {\n    console.log('main')\n\n    const API_PORT_IN = Number(process.env.API_PORT_IN)\n    console.log('main:API_PORT_IN', API_PORT_IN)\n\n    console.log('main:initial-data')\n    await ensureInitialData()\n    console.log('main:initial-data:complete')\n\n    const apolloServer = new ApolloServer({\n      typeDefs: importSchema('./src/datamodel.graphql'),\n      resolvers,\n      context,\n    })\n\n    const { url } = await apolloServer.listen({\n      port: API_PORT_IN,\n    })\n    console.log('main:url', url)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nmain()\n"]}