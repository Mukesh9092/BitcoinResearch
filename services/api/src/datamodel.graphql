scalar DateTime

enum Period {
  MINUTE1
  MINUTE5
  HOUR1
  HOUR6
  HOUR12
  DAY1
}

type Authentication {
  token: String!
  user: User!
}

type User {
  id: ID!
  name: String!
  dashboard: Dashboard
}

type Dashboard {
  id: ID!
  user: User!
  charts: [Chart!]
}

type Chart {
  id: ID!
  dashboard: Dashboard!
  period: Period!
  market: Market!
  from: DateTime!
  to: DateTime!
}

type Market {
  id: ID!
  base: String!
  quote: String!
}

type OHLCV {
  id: ID!
  market: Market!
  period: Period!
  datetime: DateTime!
  open: Float!
  high: Float!
  low: Float!
  close: Float!
  volume: Float!
}

type Query {
  getChartById(id: ID!): Chart
  getCurrentUser: User
  getDashboardById(id: ID!): Dashboard
  getMarkets: [Market]
  getOHLCVs(marketId: ID!, period: Period!, from: DateTime!, to: DateTime!): [OHLCV]
  # getIndicator(name: String! base: String!, quote: String!, period: Period, from: DateTime!, to: DateTime!): [Indicator]
}

type Mutation {
  signin(username: String!, password: String!): Authentication
  signout: Boolean
  createChart(dashboardId: ID!, marketId: ID!, period: Period!, from: DateTime!, to: DateTime!): Chart
  deleteChart(chartId: ID!): Boolean
}

schema {
  query: Query
  mutation: Mutation
}
