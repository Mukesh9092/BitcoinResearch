// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  chart: (where?: ChartWhereInput) => Promise<boolean>;
  dashboard: (where?: DashboardWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chart: (where: ChartWhereUniqueInput) => ChartNullablePromise;
  charts: (args?: {
    where?: ChartWhereInput;
    orderBy?: ChartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Chart>;
  chartsConnection: (args?: {
    where?: ChartWhereInput;
    orderBy?: ChartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChartConnectionPromise;
  dashboard: (where: DashboardWhereUniqueInput) => DashboardNullablePromise;
  dashboards: (args?: {
    where?: DashboardWhereInput;
    orderBy?: DashboardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Dashboard>;
  dashboardsConnection: (args?: {
    where?: DashboardWhereInput;
    orderBy?: DashboardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DashboardConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChart: (data: ChartCreateInput) => ChartPromise;
  updateChart: (args: {
    data: ChartUpdateInput;
    where: ChartWhereUniqueInput;
  }) => ChartPromise;
  updateManyCharts: (args: {
    data: ChartUpdateManyMutationInput;
    where?: ChartWhereInput;
  }) => BatchPayloadPromise;
  upsertChart: (args: {
    where: ChartWhereUniqueInput;
    create: ChartCreateInput;
    update: ChartUpdateInput;
  }) => ChartPromise;
  deleteChart: (where: ChartWhereUniqueInput) => ChartPromise;
  deleteManyCharts: (where?: ChartWhereInput) => BatchPayloadPromise;
  createDashboard: (data: DashboardCreateInput) => DashboardPromise;
  updateDashboard: (args: {
    data: DashboardUpdateInput;
    where: DashboardWhereUniqueInput;
  }) => DashboardPromise;
  upsertDashboard: (args: {
    where: DashboardWhereUniqueInput;
    create: DashboardCreateInput;
    update: DashboardUpdateInput;
  }) => DashboardPromise;
  deleteDashboard: (where: DashboardWhereUniqueInput) => DashboardPromise;
  deleteManyDashboards: (where?: DashboardWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chart: (
    where?: ChartSubscriptionWhereInput
  ) => ChartSubscriptionPayloadSubscription;
  dashboard: (
    where?: DashboardSubscriptionWhereInput
  ) => DashboardSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Period =
  | "MINUTE1"
  | "MINUTE15"
  | "HOUR1"
  | "HOUR6"
  | "HOUR12"
  | "DAY1";

export type ChartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "from_ASC"
  | "from_DESC"
  | "to_ASC"
  | "to_DESC"
  | "period_ASC"
  | "period_DESC"
  | "base_ASC"
  | "base_DESC"
  | "quote_ASC"
  | "quote_DESC";

export type DashboardOrderByInput = "id_ASC" | "id_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ChartWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChartWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<DateTimeInput>;
  from_not?: Maybe<DateTimeInput>;
  from_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  from_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  from_lt?: Maybe<DateTimeInput>;
  from_lte?: Maybe<DateTimeInput>;
  from_gt?: Maybe<DateTimeInput>;
  from_gte?: Maybe<DateTimeInput>;
  to?: Maybe<DateTimeInput>;
  to_not?: Maybe<DateTimeInput>;
  to_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  to_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  to_lt?: Maybe<DateTimeInput>;
  to_lte?: Maybe<DateTimeInput>;
  to_gt?: Maybe<DateTimeInput>;
  to_gte?: Maybe<DateTimeInput>;
  period?: Maybe<Period>;
  period_not?: Maybe<Period>;
  period_in?: Maybe<Period[] | Period>;
  period_not_in?: Maybe<Period[] | Period>;
  base?: Maybe<String>;
  base_not?: Maybe<String>;
  base_in?: Maybe<String[] | String>;
  base_not_in?: Maybe<String[] | String>;
  base_lt?: Maybe<String>;
  base_lte?: Maybe<String>;
  base_gt?: Maybe<String>;
  base_gte?: Maybe<String>;
  base_contains?: Maybe<String>;
  base_not_contains?: Maybe<String>;
  base_starts_with?: Maybe<String>;
  base_not_starts_with?: Maybe<String>;
  base_ends_with?: Maybe<String>;
  base_not_ends_with?: Maybe<String>;
  quote?: Maybe<String>;
  quote_not?: Maybe<String>;
  quote_in?: Maybe<String[] | String>;
  quote_not_in?: Maybe<String[] | String>;
  quote_lt?: Maybe<String>;
  quote_lte?: Maybe<String>;
  quote_gt?: Maybe<String>;
  quote_gte?: Maybe<String>;
  quote_contains?: Maybe<String>;
  quote_not_contains?: Maybe<String>;
  quote_starts_with?: Maybe<String>;
  quote_not_starts_with?: Maybe<String>;
  quote_ends_with?: Maybe<String>;
  quote_not_ends_with?: Maybe<String>;
  dashboard?: Maybe<DashboardWhereInput>;
  AND?: Maybe<ChartWhereInput[] | ChartWhereInput>;
  OR?: Maybe<ChartWhereInput[] | ChartWhereInput>;
  NOT?: Maybe<ChartWhereInput[] | ChartWhereInput>;
}

export interface DashboardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  charts_every?: Maybe<ChartWhereInput>;
  charts_some?: Maybe<ChartWhereInput>;
  charts_none?: Maybe<ChartWhereInput>;
  AND?: Maybe<DashboardWhereInput[] | DashboardWhereInput>;
  OR?: Maybe<DashboardWhereInput[] | DashboardWhereInput>;
  NOT?: Maybe<DashboardWhereInput[] | DashboardWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  dashboard?: Maybe<DashboardWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type DashboardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChartCreateInput {
  id?: Maybe<ID_Input>;
  from: DateTimeInput;
  to: DateTimeInput;
  period: Period;
  base: String;
  quote: String;
  dashboard: DashboardCreateOneWithoutChartsInput;
}

export interface DashboardCreateOneWithoutChartsInput {
  create?: Maybe<DashboardCreateWithoutChartsInput>;
  connect?: Maybe<DashboardWhereUniqueInput>;
}

export interface DashboardCreateWithoutChartsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutDashboardInput;
}

export interface UserCreateOneWithoutDashboardInput {
  create?: Maybe<UserCreateWithoutDashboardInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutDashboardInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ChartUpdateInput {
  from?: Maybe<DateTimeInput>;
  to?: Maybe<DateTimeInput>;
  period?: Maybe<Period>;
  base?: Maybe<String>;
  quote?: Maybe<String>;
  dashboard?: Maybe<DashboardUpdateOneRequiredWithoutChartsInput>;
}

export interface DashboardUpdateOneRequiredWithoutChartsInput {
  create?: Maybe<DashboardCreateWithoutChartsInput>;
  update?: Maybe<DashboardUpdateWithoutChartsDataInput>;
  upsert?: Maybe<DashboardUpsertWithoutChartsInput>;
  connect?: Maybe<DashboardWhereUniqueInput>;
}

export interface DashboardUpdateWithoutChartsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutDashboardInput>;
}

export interface UserUpdateOneRequiredWithoutDashboardInput {
  create?: Maybe<UserCreateWithoutDashboardInput>;
  update?: Maybe<UserUpdateWithoutDashboardDataInput>;
  upsert?: Maybe<UserUpsertWithoutDashboardInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutDashboardDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertWithoutDashboardInput {
  update: UserUpdateWithoutDashboardDataInput;
  create: UserCreateWithoutDashboardInput;
}

export interface DashboardUpsertWithoutChartsInput {
  update: DashboardUpdateWithoutChartsDataInput;
  create: DashboardCreateWithoutChartsInput;
}

export interface ChartUpdateManyMutationInput {
  from?: Maybe<DateTimeInput>;
  to?: Maybe<DateTimeInput>;
  period?: Maybe<Period>;
  base?: Maybe<String>;
  quote?: Maybe<String>;
}

export interface DashboardCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutDashboardInput;
  charts?: Maybe<ChartCreateManyWithoutDashboardInput>;
}

export interface ChartCreateManyWithoutDashboardInput {
  create?: Maybe<
    ChartCreateWithoutDashboardInput[] | ChartCreateWithoutDashboardInput
  >;
  connect?: Maybe<ChartWhereUniqueInput[] | ChartWhereUniqueInput>;
}

export interface ChartCreateWithoutDashboardInput {
  id?: Maybe<ID_Input>;
  from: DateTimeInput;
  to: DateTimeInput;
  period: Period;
  base: String;
  quote: String;
}

export interface DashboardUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutDashboardInput>;
  charts?: Maybe<ChartUpdateManyWithoutDashboardInput>;
}

export interface ChartUpdateManyWithoutDashboardInput {
  create?: Maybe<
    ChartCreateWithoutDashboardInput[] | ChartCreateWithoutDashboardInput
  >;
  delete?: Maybe<ChartWhereUniqueInput[] | ChartWhereUniqueInput>;
  connect?: Maybe<ChartWhereUniqueInput[] | ChartWhereUniqueInput>;
  set?: Maybe<ChartWhereUniqueInput[] | ChartWhereUniqueInput>;
  disconnect?: Maybe<ChartWhereUniqueInput[] | ChartWhereUniqueInput>;
  update?: Maybe<
    | ChartUpdateWithWhereUniqueWithoutDashboardInput[]
    | ChartUpdateWithWhereUniqueWithoutDashboardInput
  >;
  upsert?: Maybe<
    | ChartUpsertWithWhereUniqueWithoutDashboardInput[]
    | ChartUpsertWithWhereUniqueWithoutDashboardInput
  >;
  deleteMany?: Maybe<ChartScalarWhereInput[] | ChartScalarWhereInput>;
  updateMany?: Maybe<
    ChartUpdateManyWithWhereNestedInput[] | ChartUpdateManyWithWhereNestedInput
  >;
}

export interface ChartUpdateWithWhereUniqueWithoutDashboardInput {
  where: ChartWhereUniqueInput;
  data: ChartUpdateWithoutDashboardDataInput;
}

export interface ChartUpdateWithoutDashboardDataInput {
  from?: Maybe<DateTimeInput>;
  to?: Maybe<DateTimeInput>;
  period?: Maybe<Period>;
  base?: Maybe<String>;
  quote?: Maybe<String>;
}

export interface ChartUpsertWithWhereUniqueWithoutDashboardInput {
  where: ChartWhereUniqueInput;
  update: ChartUpdateWithoutDashboardDataInput;
  create: ChartCreateWithoutDashboardInput;
}

export interface ChartScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<DateTimeInput>;
  from_not?: Maybe<DateTimeInput>;
  from_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  from_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  from_lt?: Maybe<DateTimeInput>;
  from_lte?: Maybe<DateTimeInput>;
  from_gt?: Maybe<DateTimeInput>;
  from_gte?: Maybe<DateTimeInput>;
  to?: Maybe<DateTimeInput>;
  to_not?: Maybe<DateTimeInput>;
  to_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  to_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  to_lt?: Maybe<DateTimeInput>;
  to_lte?: Maybe<DateTimeInput>;
  to_gt?: Maybe<DateTimeInput>;
  to_gte?: Maybe<DateTimeInput>;
  period?: Maybe<Period>;
  period_not?: Maybe<Period>;
  period_in?: Maybe<Period[] | Period>;
  period_not_in?: Maybe<Period[] | Period>;
  base?: Maybe<String>;
  base_not?: Maybe<String>;
  base_in?: Maybe<String[] | String>;
  base_not_in?: Maybe<String[] | String>;
  base_lt?: Maybe<String>;
  base_lte?: Maybe<String>;
  base_gt?: Maybe<String>;
  base_gte?: Maybe<String>;
  base_contains?: Maybe<String>;
  base_not_contains?: Maybe<String>;
  base_starts_with?: Maybe<String>;
  base_not_starts_with?: Maybe<String>;
  base_ends_with?: Maybe<String>;
  base_not_ends_with?: Maybe<String>;
  quote?: Maybe<String>;
  quote_not?: Maybe<String>;
  quote_in?: Maybe<String[] | String>;
  quote_not_in?: Maybe<String[] | String>;
  quote_lt?: Maybe<String>;
  quote_lte?: Maybe<String>;
  quote_gt?: Maybe<String>;
  quote_gte?: Maybe<String>;
  quote_contains?: Maybe<String>;
  quote_not_contains?: Maybe<String>;
  quote_starts_with?: Maybe<String>;
  quote_not_starts_with?: Maybe<String>;
  quote_ends_with?: Maybe<String>;
  quote_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChartScalarWhereInput[] | ChartScalarWhereInput>;
  OR?: Maybe<ChartScalarWhereInput[] | ChartScalarWhereInput>;
  NOT?: Maybe<ChartScalarWhereInput[] | ChartScalarWhereInput>;
}

export interface ChartUpdateManyWithWhereNestedInput {
  where: ChartScalarWhereInput;
  data: ChartUpdateManyDataInput;
}

export interface ChartUpdateManyDataInput {
  from?: Maybe<DateTimeInput>;
  to?: Maybe<DateTimeInput>;
  period?: Maybe<Period>;
  base?: Maybe<String>;
  quote?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  dashboard?: Maybe<DashboardCreateOneWithoutUserInput>;
}

export interface DashboardCreateOneWithoutUserInput {
  create?: Maybe<DashboardCreateWithoutUserInput>;
  connect?: Maybe<DashboardWhereUniqueInput>;
}

export interface DashboardCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  charts?: Maybe<ChartCreateManyWithoutDashboardInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  dashboard?: Maybe<DashboardUpdateOneWithoutUserInput>;
}

export interface DashboardUpdateOneWithoutUserInput {
  create?: Maybe<DashboardCreateWithoutUserInput>;
  update?: Maybe<DashboardUpdateWithoutUserDataInput>;
  upsert?: Maybe<DashboardUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DashboardWhereUniqueInput>;
}

export interface DashboardUpdateWithoutUserDataInput {
  charts?: Maybe<ChartUpdateManyWithoutDashboardInput>;
}

export interface DashboardUpsertWithoutUserInput {
  update: DashboardUpdateWithoutUserDataInput;
  create: DashboardCreateWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ChartSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChartWhereInput>;
  AND?: Maybe<ChartSubscriptionWhereInput[] | ChartSubscriptionWhereInput>;
  OR?: Maybe<ChartSubscriptionWhereInput[] | ChartSubscriptionWhereInput>;
  NOT?: Maybe<ChartSubscriptionWhereInput[] | ChartSubscriptionWhereInput>;
}

export interface DashboardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DashboardWhereInput>;
  AND?: Maybe<
    DashboardSubscriptionWhereInput[] | DashboardSubscriptionWhereInput
  >;
  OR?: Maybe<
    DashboardSubscriptionWhereInput[] | DashboardSubscriptionWhereInput
  >;
  NOT?: Maybe<
    DashboardSubscriptionWhereInput[] | DashboardSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Chart {
  id: ID_Output;
  from: DateTimeOutput;
  to: DateTimeOutput;
  period: Period;
  base: String;
  quote: String;
}

export interface ChartPromise extends Promise<Chart>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<DateTimeOutput>;
  to: () => Promise<DateTimeOutput>;
  period: () => Promise<Period>;
  base: () => Promise<String>;
  quote: () => Promise<String>;
  dashboard: <T = DashboardPromise>() => T;
}

export interface ChartSubscription
  extends Promise<AsyncIterator<Chart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: () => Promise<AsyncIterator<DateTimeOutput>>;
  to: () => Promise<AsyncIterator<DateTimeOutput>>;
  period: () => Promise<AsyncIterator<Period>>;
  base: () => Promise<AsyncIterator<String>>;
  quote: () => Promise<AsyncIterator<String>>;
  dashboard: <T = DashboardSubscription>() => T;
}

export interface ChartNullablePromise
  extends Promise<Chart | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<DateTimeOutput>;
  to: () => Promise<DateTimeOutput>;
  period: () => Promise<Period>;
  base: () => Promise<String>;
  quote: () => Promise<String>;
  dashboard: <T = DashboardPromise>() => T;
}

export interface Dashboard {
  id: ID_Output;
}

export interface DashboardPromise extends Promise<Dashboard>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  charts: <T = FragmentableArray<Chart>>(args?: {
    where?: ChartWhereInput;
    orderBy?: ChartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DashboardSubscription
  extends Promise<AsyncIterator<Dashboard>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  charts: <T = Promise<AsyncIterator<ChartSubscription>>>(args?: {
    where?: ChartWhereInput;
    orderBy?: ChartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DashboardNullablePromise
  extends Promise<Dashboard | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  charts: <T = FragmentableArray<Chart>>(args?: {
    where?: ChartWhereInput;
    orderBy?: ChartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  dashboard: <T = DashboardPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  dashboard: <T = DashboardSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  dashboard: <T = DashboardPromise>() => T;
}

export interface ChartConnection {
  pageInfo: PageInfo;
  edges: ChartEdge[];
}

export interface ChartConnectionPromise
  extends Promise<ChartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChartEdge>>() => T;
  aggregate: <T = AggregateChartPromise>() => T;
}

export interface ChartConnectionSubscription
  extends Promise<AsyncIterator<ChartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChartEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChartEdge {
  node: Chart;
  cursor: String;
}

export interface ChartEdgePromise extends Promise<ChartEdge>, Fragmentable {
  node: <T = ChartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChartEdgeSubscription
  extends Promise<AsyncIterator<ChartEdge>>,
    Fragmentable {
  node: <T = ChartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChart {
  count: Int;
}

export interface AggregateChartPromise
  extends Promise<AggregateChart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartSubscription
  extends Promise<AsyncIterator<AggregateChart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DashboardConnection {
  pageInfo: PageInfo;
  edges: DashboardEdge[];
}

export interface DashboardConnectionPromise
  extends Promise<DashboardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DashboardEdge>>() => T;
  aggregate: <T = AggregateDashboardPromise>() => T;
}

export interface DashboardConnectionSubscription
  extends Promise<AsyncIterator<DashboardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DashboardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDashboardSubscription>() => T;
}

export interface DashboardEdge {
  node: Dashboard;
  cursor: String;
}

export interface DashboardEdgePromise
  extends Promise<DashboardEdge>,
    Fragmentable {
  node: <T = DashboardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DashboardEdgeSubscription
  extends Promise<AsyncIterator<DashboardEdge>>,
    Fragmentable {
  node: <T = DashboardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDashboard {
  count: Int;
}

export interface AggregateDashboardPromise
  extends Promise<AggregateDashboard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDashboardSubscription
  extends Promise<AsyncIterator<AggregateDashboard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChartSubscriptionPayload {
  mutation: MutationType;
  node: Chart;
  updatedFields: String[];
  previousValues: ChartPreviousValues;
}

export interface ChartSubscriptionPayloadPromise
  extends Promise<ChartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChartPreviousValuesPromise>() => T;
}

export interface ChartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChartPreviousValuesSubscription>() => T;
}

export interface ChartPreviousValues {
  id: ID_Output;
  from: DateTimeOutput;
  to: DateTimeOutput;
  period: Period;
  base: String;
  quote: String;
}

export interface ChartPreviousValuesPromise
  extends Promise<ChartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<DateTimeOutput>;
  to: () => Promise<DateTimeOutput>;
  period: () => Promise<Period>;
  base: () => Promise<String>;
  quote: () => Promise<String>;
}

export interface ChartPreviousValuesSubscription
  extends Promise<AsyncIterator<ChartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: () => Promise<AsyncIterator<DateTimeOutput>>;
  to: () => Promise<AsyncIterator<DateTimeOutput>>;
  period: () => Promise<AsyncIterator<Period>>;
  base: () => Promise<AsyncIterator<String>>;
  quote: () => Promise<AsyncIterator<String>>;
}

export interface DashboardSubscriptionPayload {
  mutation: MutationType;
  node: Dashboard;
  updatedFields: String[];
  previousValues: DashboardPreviousValues;
}

export interface DashboardSubscriptionPayloadPromise
  extends Promise<DashboardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DashboardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DashboardPreviousValuesPromise>() => T;
}

export interface DashboardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DashboardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DashboardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DashboardPreviousValuesSubscription>() => T;
}

export interface DashboardPreviousValues {
  id: ID_Output;
}

export interface DashboardPreviousValuesPromise
  extends Promise<DashboardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface DashboardPreviousValuesSubscription
  extends Promise<AsyncIterator<DashboardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Period",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Dashboard",
    embedded: false
  },
  {
    name: "Chart",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
