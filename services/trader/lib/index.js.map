{"version":3,"sources":["common/environment.ts","index.ts"],"names":["isBrowser","Boolean","window","isServer","isDevelopment","process","env","NODE_ENV","isProduction","PORT","Number","TRADER_PORT_IN","console","log","expressServer","use","get","_req","res","json","health","binance","ccxt","poloniex","exchanges","req","name","params","listen","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,SAASA,SAAT,GAAqB;AAC1B,SAAOC,OAAO,CAAC,OAAOC,MAAP,KAAkB,WAAnB,CAAd;AACD;;AAEM,SAASC,QAAT,GAAoB;AACzB,SAAOF,OAAO,CAAC,OAAOC,MAAP,KAAkB,WAAnB,CAAd;AACD;;AAEM,SAASE,aAAT,GAAyB;AAC9B,SAAOH,OAAO,CAACI,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,SAA1B,CAAd;AACD;;AAEM,SAASC,YAAT,GAAwB;AAC7B,SAAOP,OAAO,CAACI,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA1B,CAAd;AACD;;;;ACdD;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAME,IAAI,GAAGC,MAAM,CAACL,OAAO,CAACC,GAAR,CAAYK,cAAb,CAAnB;AACAC,OAAO,CAACC,GAAR,CAAa,QAAOJ,IAAK,EAAzB;AAEA,MAAMK,aAAa,GAAG,uBAAtB;AAEAA,aAAa,CAACC,GAAd,CAAkB,uBAAlB;AACAD,aAAa,CAACC,GAAd,CAAkB,oBAAlB;;AAEA,IAAI,iCAAJ,EAAqB;AACnBD,EAAAA,aAAa,CAACC,GAAd,CAAkB,qBAAO,KAAP,CAAlB;AACD,CAFD,MAEO;AACLD,EAAAA,aAAa,CAACC,GAAd,CAAkB,qBAAO,QAAP,CAAlB;AACD;;AAEDD,aAAa,CAACE,GAAd,CAAkB,cAAlB,EAAkC,CAACC,IAAD,EAAgBC,GAAhB,KAAkC;AAClEA,EAAAA,GAAG,CAACC,IAAJ,CAAS;AACPC,IAAAA,MAAM,EAAE;AADD,GAAT;AAGD,CAJD;AAMA,MAAMC,OAAO,GAAG,IAAIC,cAAKD,OAAT,EAAhB;AACA,MAAME,QAAQ,GAAG,IAAID,cAAKC,QAAT,EAAjB;AAEA,MAAMC,SAAS,GAAG;AAChBH,EAAAA,OADgB;AAEhBE,EAAAA;AAFgB,CAAlB;AAKAT,aAAa,CAACE,GAAd,CAAkB,gBAAlB,EAAoC,CAACS,GAAD,EAAeP,GAAf,KAAiC;AACnE,QAAMQ,IAAI,GAAGD,GAAG,CAACE,MAAJ,CAAWD,IAAxB,CADmE,CAGnE;AACA;AACA;AACA;;AAEAR,EAAAA,GAAG,CAACC,IAAJ,CAAS;AACPO,IAAAA;AADO,GAAT;AAGD,CAXD;AAaAZ,aAAa,CAACc,MAAd,CAAqBnB,IAArB,EAA4BoB,KAAD,IAAkB;AAC3C,MAAIA,KAAJ,EAAW;AACTjB,IAAAA,OAAO,CAACiB,KAAR,CAAcA,KAAd;AACD;;AAEDjB,EAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBJ,IAAK,EAAzC;AACD,CAND","file":"index.js","sourceRoot":"../src","sourcesContent":["export function isBrowser() {\n  return Boolean(typeof window !== 'undefined')\n}\n\nexport function isServer() {\n  return Boolean(typeof window === 'undefined')\n}\n\nexport function isDevelopment() {\n  return Boolean(process.env.NODE_ENV === 'develop')\n}\n\nexport function isProduction() {\n  return Boolean(process.env.NODE_ENV === 'production')\n}\n","import { json } from 'body-parser'\nimport ccxt from 'ccxt'\nimport cors from 'cors'\nimport express, { Request, Response } from 'express'\nimport morgan from 'morgan'\nimport { isDevelopment } from './common/environment'\n\nconst PORT = Number(process.env.TRADER_PORT_IN)\nconsole.log(`PORT=${PORT}`)\n\nconst expressServer = express()\n\nexpressServer.use(json())\nexpressServer.use(cors())\n\nif (isDevelopment()) {\n  expressServer.use(morgan('dev'))\n} else {\n  expressServer.use(morgan('common'))\n}\n\nexpressServer.get('/healthcheck', (_req: Request, res: Response) => {\n  res.json({\n    health: 'ok',\n  })\n})\n\nconst binance = new ccxt.binance()\nconst poloniex = new ccxt.poloniex()\n\nconst exchanges = {\n  binance,\n  poloniex,\n}\n\nexpressServer.get('/traders/:name', (req: Request, res: Response) => {\n  const name = req.params.name\n\n  // TODO: - Fetch the Exchange from the DB.\n  //         - GraphQL Client of Keystone Service\n  //       - Find Periodic channel in Service to keep DB up to date with ccxt\n  //       - Set 24 hour update of exchanges.\n\n  res.json({\n    name\n  })\n})\n\nexpressServer.listen(PORT, (error: Error) => {\n  if (error) {\n    console.error(error)\n  }\n\n  console.log(`Listening on 0.0.0.0:${PORT}`)\n})\n"]}