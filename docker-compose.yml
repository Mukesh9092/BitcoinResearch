version: '3'

# Ports:
#   - Application Services: 80xx
#   - Databases:            81xx
#   - Dashboards:           82xx

services:
  proxy:
    image: traefik
    command: -c /dev/null --api --docker --docker.domain=docker.localhost --logLevel=DEBUG
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./services/proxy/traefik.toml:/traefik.toml
      - ./services/proxy/acme.json:/acme.json


  nats:
    image: nats:latest
    depends_on:
      - proxy
    ports:
      - ${NATS_PORT}:${NATS_PORT}
      - ${NATS_HTTP_PORT}:${NATS_HTTP_PORT}
      - ${NATS_CLUSTER_PORT}:${NATS_CLUSTER_PORT}
    env_file: .env
    environment:
      - SERVICE_NAME=nats
    labels:
      - traefik.frontend.rule=Host:nats.docker.localhost
      - traefik.backend=nats
      - traefik.port=${NATS_HTTP_PORT}

  nats-admin:
    build: ./services/nats-admin
    depends_on:
      - proxy
      - nats
    ports:
      - ${NATS_ADMIN_PORT}:3000
    env_file: .env
    environment:
      - SERVICE_NAME=nats-admin
    labels:
      - traefik.frontend.rule=Host:nats-admin.docker.localhost
      - traefik.backend=nats-admin
      - traefik.port=3000


  eventstore:
    image: eventstore/eventstore
    depends_on:
      - proxy
    ports:
      - ${EVENTSTORE_PORT}:${EVENTSTORE_PORT}
      - ${EVENTSTORE_HTTP_PORT}:${EVENTSTORE_HTTP_PORT}
    volumes:
      - ./services/eventstore/data:/var/lib/eventstore
      - ./services/eventstore/logs:/var/log/eventstore
    env_file: .env
    labels:
      - traefik.frontend.rule=Host:eventstore.docker.localhost
      - traefik.backend=eventstore
      - traefik.port=${EVENTSTORE_HTTP_PORT}


  redis:
    build: ./services/redis
    depends_on:
      - proxy
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - ./services/redis:/service
      - ./services/redis/data:/data
    env_file: .env
    environment:
      - SERVICE_NAME=redis
    labels:
      - traefik.frontend.rule=Host:redis.docker.localhost
      - traefik.backend=redis
      - traefik.port=${REDIS_PORT}

  redis-admin:
    build: ./services/redis-admin
    depends_on:
      - proxy
      - redis
    ports:
      - ${REDIS_ADMIN_PORT}:${REDIS_ADMIN_PORT}
    volumes:
      - ./services/redis-admin:/service
    env_file: .env
    environment:
      - SERVICE_NAME=redis-admin
    labels:
      - traefik.frontend.rule=Host:redis-admin.docker.localhost
      - traefik.backend=redis-admin
      - traefik.port=${REDIS_ADMIN_PORT}


  postgresql:
    image: postgres:latest
    depends_on:
      - proxy
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./services/postgresql/data:/var/lib/postgresql/data
    env_file: .env
    environment:
      - SERVICE_NAME=postgresql
    labels:
      - traefik.frontend.rule=Host:postgresql.docker.localhost
      - traefik.backend=postgresql
      - traefik.port=${POSTGRES_PORT}

  postgresql-admin:
    image: sosedoff/pgweb
    depends_on:
      - proxy
      - postgresql
    ports:
      - ${POSTGRES_ADMIN_PORT}:${POSTGRES_ADMIN_PORT}
    env_file: .env
    environment:
      - SERVICE_NAME=postgresql-admin
    labels:
      - traefik.frontend.rule=Host:postgresql-admin.docker.localhost
      - traefik.backend=postgresql-admin
      - traefik.port=${POSTGRES_ADMIN_PORT}


  influxdb:
    image: influxdb:latest
    depends_on:
      - proxy
    ports:
      - ${INFLUXDB_PORT}:${INFLUXDB_PORT}
    volumes:
      - ./services/influxdb/data:/var/lib/influxdb
    env_file: .env
    labels:
      - traefik.frontend.rule=Host:influxdb.docker.localhost
      - traefik.backend=influxdb
      - traefik.port=${INFLUXDB_PORT}

  influxdb-chronograf:
    image: chronograf:latest
    depends_on:
      - proxy
      - influxdb
    ports:
      - ${INFLUXDB_CHRONOGRAF_PORT}:${INFLUXDB_CHRONOGRAF_PORT}
    volumes:
      - ./services/influxdb-chronograf/data:/var/lib/chronograf
    env_file: .env
    environment:
      INFLUXDB_URL: http://${INFLUXDB_HOST}:${INFLUXDB_PORT}
      KAPACITOR_URL: http://${INFLUXDB_KAPACITOR_HOST}:${INFLUXDB_KAPACITOR_PORT}
    labels:
      - traefik.frontend.rule=Host:influxdb-chronograf.docker.localhost
      - traefik.backend=influxdb-chronograf
      - traefik.port=${INFLUXDB_CHRONOGRAF_PORT}

  influxdb-telegraf:
    image: telegraf:latest
    depends_on:
      - proxy
      - influxdb
    ports:
      - ${INFLUXDB_TELEGRAF_STATSD_PORT}:${INFLUXDB_TELEGRAF_STATSD_PORT}/udp
      - ${INFLUXDB_TELEGRAF_UDP_PORT}:${INFLUXDB_TELEGRAF_UDP_PORT}/udp
      - ${INFLUXDB_TELEGRAF_TCP_PORT}:${INFLUXDB_TELEGRAF_TCP_PORT}
    volumes:
      - ./services/influxdb-telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    env_file: .env
    labels:
      - traefik.frontend.rule=Host:influxdb-telegraf.docker.localhost
      - traefik.backend=influxdb-telegraf
      - traefik.port=${INFLUXDB_TELEGRAF_TCP_PORT}

  influxdb-kapacitor:
    image: kapacitor:latest
    depends_on:
      - proxy
      - influxdb
    ports:
      - ${INFLUXDB_KAPACITOR_PORT}:${INFLUXDB_KAPACITOR_PORT}
    volumes:
      - ./services/influxdb-kapacitor/data:/var/lib/kapacitor
    env_file: .env
    environment:
      KAPACITOR_HOSTNAME: ${INFLUXDB_KAPACITOR_HOST}
      KAPACITOR_INFLUXDB_0_URLS_0: http://${INFLUXDB_HOST}:${INFLUXDB_PORT}
    labels:
      - traefik.frontend.rule=Host:influxdb-kapacitor.docker.localhost
      - traefik.backend=influxdb-kapacitor
      - traefik.port=${INFLUXDB_KAPACITOR_PORT}


  orderbook-importer:
    build: ./services/api
    depends_on:
      - nats
    volumes:
      - ./services/api:/service
    env_file: .env
    environment:
      - SERVICE_NAME=orderbook-importer
      - API_SERVICE_NAME=orderbook-importer

  orderbook-state:
    build: ./services/api
    depends_on:
      - nats
    ports:
      - ${API_ORDERBOOK_STATE_PORT}:${API_ORDERBOOK_STATE_PORT}
    volumes:
      - ./services/api:/service
    env_file: .env
    environment:
      - SERVICE_NAME=orderbook-state
      - API_SERVICE_NAME=orderbook-state

  ohlc-state:
    build: ./services/api
    depends_on:
      - nats
    ports:
      - ${API_OHLC_STATE_PORT}:${API_OHLC_STATE_PORT}
    volumes:
      - ./services/api:/service
    env_file: .env
    environment:
      - SERVICE_NAME=ohlc-state
      - API_SERVICE_NAME=ohlc-state

  graphql:
    build: ./services/api
    depends_on:
      - proxy
    ports:
      - ${API_GRAPHQL_PORT}:${API_GRAPHQL_PORT}
    volumes:
      - ./services/api:/service
    env_file: .env
    environment:
      - SERVICE_NAME=graphql
      - API_SERVICE_NAME=graphql
    labels:
      - traefik.frontend.rule=Host:graphql.api.docker.localhost
      - traefik.backend=graphql
      - traefik.port=${API_GRAPHQL_PORT}

  graphiql:
    build: ./services/api
    depends_on:
      - proxy
      - graphql
    ports:
      - ${API_GRAPHIQL_PORT}:${API_GRAPHIQL_PORT}
    volumes:
      - ./services/api:/service
    env_file: .env
    environment:
      - SERVICE_NAME=graphiql
      - API_SERVICE_NAME=graphiql
    labels:
      - traefik.frontend.rule=Host:graphiql.api.docker.localhost
      - traefik.backend=graphiql
      - traefik.port=${API_GRAPHIQL_PORT}

  web:
    build: ./services/api
    depends_on:
      - proxy
    ports:
      - ${WEB_PORT}:${WEB_PORT}
    volumes:
      - ./services/api:/service
    env_file: .env
    environment:
      - SERVICE_NAME=web
      - API_SERVICE_NAME=web
    labels:
      - traefik.frontend.rule=Host:docker.localhost
      - traefik.backend=web
      - traefik.port=${WEB_PORT}
