version: '3'
services:
  proxy:
    image: "traefik"
    command:
      - '--api.insecure=true'
      - '--providers.docker'
    ports:
      - '80:80'
      - '8080:8080'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      # - './services/proxy/traefik.toml:/traefik.toml'
    # env_file: .env

  postgresql:
    image: 'postgres:latest'
    ports:
      - '${POSTGRESQL_PORT}:${POSTGRESQL_PORT_IN}'
    volumes:
      - './services/postgresql/data:/var/lib/postgresql/data'
    env_file: .env

  pgadmin:
    depends_on:
      - postgresql
    image: dpage/pgadmin4:latest
    ports:
      - '${PGADMIN_PORT}:${PGADMIN_PORT_IN}'
    volumes:
      - './services/pgadmin/data:/root/.pgadmin'
    env_file: .env
    labels:
      - 'traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_HOST}.${HOSTNAME}`)'

  python-api:
    depends_on:
      - postgresql
    build: ./services/python-api
    ports:
      - '${PYTHON_API_PORT}:${PYTHON_API_PORT_IN}'
    volumes:
      - './services/python-api:/service'
    env_file: .env
    labels:
      - 'traefik.http.routers.python-api.rule=Host(`${PYTHON_API_HOST}.${HOSTNAME}`)'

  # marketstore:
  #   image: alpacamarkets/marketstore:latest
  #   ports:
  #     - '${MARKETSTORE_PORT}:${MARKETSTORE_PORT_IN}'
  #   volumes:
  #     - './services/marketstore/data:/data'
  #     - './services/marketstore/mkts.yml:/etc/mkts.yml'
  #   env_file: .env
  #   labels:
  #     - 'traefik.http.routers.marketstore.rule=Host(`${MARKETSTORE_HOST}.${HOSTNAME}`)'
  #     - 'traefik.http.services.marketstore.loadbalancer.server.port=${MARKETSTORE_PORT_IN}`)'

  # marketstore-api:
  #   build: services/marketstore-api
  #   ports:
  #     - '${MARKETSTORE_API_PORT}:${MARKETSTORE_API_PORT_IN}'
  #   volumes:
  #     - './services/marketstore-api:/service'
  #   env_file: .env
  #   labels:
  #     traefik.enable: 'true'
  #     traefik.http.routers.whoami.rule: 'Host(`${MARKETSTORE_API_HOST}.${HOSTNAME}`)'
  #     traefik.http.routers.whoami.entrypoints: 'web'

  tensorflow:
    build: services/tensorflow
    ports:
      - '${TENSORFLOW_PORT}:${TENSORFLOW_PORT_IN}'
    volumes:
      - './common/tensorflow/tf:/tf'
    env_file: .env
    command: 'bash -c "source /etc/bash.bashrc && jupyter notebook --notebook-dir=/tf --ip=${TENSORFLOW_HOST} --no-browser --allow-root"'
    labels:
      - 'traefik.http.routers.tensorflow.rule=Host(`${TENSORFLOW_HOST}.${HOSTNAME}`)'
      # - 'traefik.http.services.tensorflow.loadbalancer.server.port=${TENSORFLOW_PORT_IN}`)'

  # tf-serve:
  #   image: tobegit3hub/simple_tensorflow_serving
  #   ports:
  #     - '${TF_SERVE_PORT}:${TF_SERVE_PORT_IN}'
  #   volumes:
  #     - './services/tf-serve:/service'
  #   env_file: .env
  #   command: 'simple_tensorflow_serving --model_base_path=/service/src/common/tensorflow/tf/models/test1'
  #   labels:
  #     traefik.frontend.rule: 'Host:${TF_SERVE_HOST}.${HOSTNAME}'
  #     traefik.backend: '${TF_SERVE_HOST}'
  #     traefik.port: '${TF_SERVE_PORT_IN}'

  # prisma:
  #   depends_on:
  #     - postgresql
  #   image: prismagraphql/prisma:latest
  #   ports:
  #     - '${PRISMA_PORT}:${PRISMA_PORT_IN}'
  #   env_file: .env
  #   environment:
  #     SLOW_QUERIES_LOGGING: 'true'
  #     SLOW_QUERIES_LOGGING_THRESHOLD: '0'
  #     PRISMA_CONFIG: |
  #       port: ${PRISMA_PORT_IN}
  #       # uncomment the next line and provide the env var
  #       # PRISMA_MANAGEMENT_API_SECRET=my-secret to activate cluster security
  #       # managementApiSecret: my-secret
  #       databases:
  #         default:
  #           connector: postgres
  #           host: ${POSTGRESQL_HOST}
  #           port: ${POSTGRESQL_PORT}
  #           user: ${POSTGRESQL_USER}
  #           password: ${POSTGRESQL_PASSWORD}
  #           migrations: true
  #           rawAccess: true
  #   labels:
  #     traefik.frontend.rule: 'Host:${PRISMA_HOST}.${HOSTNAME}'
  #     traefik.backend: '${PRISMA_HOST}'
  #     traefik.port: '${PRISMA_PORT_IN}'

  # api:
  #   depends_on:
  #     - prisma
  #   build: services/api
  #   ports:
  #     - '${API_PORT}:${API_PORT_IN}'
  #   volumes:
  #     - './services/api:/service'
  #   env_file: .env
  #   labels:
  #     traefik.frontend.rule: 'Host:${API_HOST}.${HOSTNAME}'
  #     traefik.backend: '${API_HOST}'
  #     traefik.port: '${API_PORT_IN}'

  # web:
  #   depends_on:
  #     - api
  #   build: services/web
  #   ports:
  #     - '${WEB_PORT}:${WEB_PORT_IN}'
  #     - '${WEB_HMR_PORT}:${WEB_HMR_PORT_IN}'
  #   volumes:
  #     - './services/web:/service'
  #   env_file: .env
  #   labels:
  #     traefik.frontend.rule: 'Host:${WEB_HOST}.${HOSTNAME}'
  #     traefik.backend: '${WEB_HOST}'
  #     traefik.port: '${WEB_PORT_IN}'

#  advisor:
#    image: tobegit3hub/advisor
#    ports:
#      - '${ADVISOR_PORT}:${ADVISOR_PORT_IN}'
#    env_file: .env
#    labels:
#      traefik.backend: '${ADVISOR_HOST}'
#      traefik.port: '${ADVISOR_PORT_IN}'
