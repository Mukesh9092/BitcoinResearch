version: '3'

# Ports:
#   - Application Services: 80xx
#   - Databases:            81xx
#   - Dashboards:           82xx

services:
  nats:
    image: nats:latest
    ports:
      - ${NATS_PORT}:${NATS_PORT}
      - ${NATS_HTTP_PORT}:${NATS_HTTP_PORT}
      - ${NATS_CLUSTER_PORT}:${NATS_CLUSTER_PORT}
    env_file: .env
    environment:
      - SERVICE_NAME=nats
    labels:
      - traefik.backend=nats
      - traefik.frontend.rule=Host:nats.docker.localhost

  nats-admin:
    build: ./services/nats-admin
    ports:
      - ${NATS_ADMIN_PORT}:3000
    env_file: .env
    environment:
      - SERVICE_NAME=nats-admin
    labels:
      - traefik.backend=nats-admin
      - traefik.frontend.rule=Host:nats-admin.docker.localhost

  redis:
    build: ./services/redis
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - ./services/redis:/service
      - ./services/redis/data:/data
    env_file: .env
    environment:
      - SERVICE_NAME=redis
    labels:
      - traefik.backend=redis
      - traefik.frontend.rule=Host:redis.docker.localhost

  redis-admin:
    build: ./services/redis-admin
    depends_on:
      - redis
    ports:
      - ${REDIS_ADMIN_PORT}:${REDIS_ADMIN_PORT}
    volumes:
      - ./services/redis-admin:/service
    env_file: .env
    environment:
      - SERVICE_NAME=redis-admin
    labels:
      - traefik.backend=redis-admin
      - traefik.frontend.rule=Host:redis-admin.docker.localhost

  postgresql:
    image: postgres:latest
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./services/postgresql/data:/var/lib/postgresql/data
    env_file: .env
    environment:
      - SERVICE_NAME=postgresql
    labels:
      - traefik.backend=postgresql
      - traefik.frontend.rule=Host:postgresql.docker.localhost

  postgresql-admin:
    image: sosedoff/pgweb
    depends_on:
      - postgresql
    links:
      - postgresql
    depends_on:
      - postgresql
    ports: 
      - ${POSTGRES_ADMIN_PORT}:${POSTGRES_ADMIN_PORT}
    env_file: .env
    environment:
      - SERVICE_NAME=postgresql-admin
    labels:
      - traefik.backend=postgresql-admin
      - traefik.frontend.rule=Host:postgresql-admin.docker.localhost

  proxy:
    image: traefik
    command: -c /dev/null --api --docker --docker.domain=docker.localhost --logLevel=DEBUG
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./services/proxy/traefik.toml:/traefik.toml
      - ./services/proxy/acme.json:/acme.json

  graphql:
    build: ./services/api
    depends_on:
      - nats
      - proxy
    ports:
      - ${API_GRAPHQL_PORT}:${API_GRAPHQL_PORT}
    volumes:
      - ./services/api:/service
    env_file: .env
    environment:
      - SERVICE_NAME=graphql
      - API_SERVICE_NAME=graphql
    labels:
      - traefik.backend=graphql
      - traefik.frontend.rule=Host:graphql.api.docker.localhost

  graphiql:
    build: ./services/api
    depends_on:
      - nats
      - proxy
    ports:
      - ${API_GRAPHIQL_PORT}:${API_GRAPHIQL_PORT}
    volumes:
      - ./services/api:/service
    env_file: .env
    environment:
      - SERVICE_NAME=graphiql
      - API_SERVICE_NAME=graphiql
    labels:
      - traefik.backend=graphiql
      - traefik.frontend.rule=Host:graphiql.api.docker.localhost

  web:
    build: ./services/web
    depends_on:
      - nats
      - proxy
    ports:
      - ${WEB_PORT}:${WEB_PORT}
    volumes:
      - ./services/web:/service
    env_file: .env
    environment:
      - SERVICE_NAME=web
    labels:
      - traefik.backend=web
      - traefik.frontend.rule=Host:docker.localhost

  orderbook-importer:
    build: ./services/api
    depends_on:
      - nats
    volumes:
      - ./services/api:/service
    env_file: .env
    environment:
      - SERVICE_NAME=orderbook-importer
      - API_SERVICE_NAME=orderbook-importer
    labels:
      - traefik.backend=orderbook-importer
      - traefik.frontend.rule=Host:orderbook-importer.docker.localhost

  orderbook-state:
    build: ./services/api
    depends_on:
      - nats
    ports:
      - ${API_ORDERBOOK_STATE_PORT}:${API_ORDERBOOK_STATE_PORT}
    volumes:
      - ./services/api:/service
    env_file: .env
    environment:
      - SERVICE_NAME=orderbook-state
      - API_SERVICE_NAME=orderbook-state
    labels:
      - traefik.backend=orderbook-state
      - traefik.frontend.rule=Host:orderbook-state.docker.localhost

  # eventstore:
  #   image: eventstore/eventstore
  #   ports:
  #     - ${EVENTSTORE_PORT}:${EVENTSTORE_PORT}
  #     - ${EVENTSTORE_HTTP_PORT}:${EVENTSTORE_HTTP_PORT}
  #   volumes:
  #     - ./services/eventstore/data:/var/lib/eventstore
  #     - ./services/eventstore/logs:/var/log/eventstore
  #   env_file: .env
  #   labels:
  #     - traefik.backend=eventstore
  #     - traefik.frontend.rule=Host:eventstore.docker.localhost

  # authentication:
  #   build: ./services/authentication
  #   depends_on:
  #     - nats
  #     - proxy
  #     - redis
  #     - postgresql
  #   ports:
  #     - ${AUTHENTICATION_PORT}:${AUTHENTICATION_PORT}
  #   volumes:
  #     - ./services/authentication:/service
  #   env_file: .env
  #   environment:
  #     - SERVICE_NAME=authentication
  #   labels:
  #     - traefik.backend=authentication
  #     - traefik.frontend.rule=Host:auth.docker.localhost

  # influxdb:
  #   image: influxdb:latest
  #   ports:
  #     - ${INFLUXDB_PORT}:${INFLUXDB_PORT}
  #   volumes:
  #     - ./services/influxdb/data:/var/lib/influxdb
  #   env_file: .env

  # influxdb-chronograf:
  #   image: chronograf:latest
  #   ports:
  #     - ${INFLUXDB_CHRONOGRAF_PORT}:${INFLUXDB_CHRONOGRAF_PORT}
  #   volumes:
  #     - ./services/influxdb-chronograf/data:/var/lib/chronograf
  #   env_file: .env

  # influxdb-telegraf:
  #   image: telegraf:latest
  #   ports:
  #     - ${INFLUXDB_TELEGRAF_STATSD_PORT}:${INFLUXDB_TELEGRAF_STATSD_PORT}
  #     - ${INFLUXDB_TELEGRAF_UDP_PORT}:${INFLUXDB_TELEGRAF_UDP_PORT}
  #     - ${INFLUXDB_TELEGRAF_TCP_PORT}:${INFLUXDB_TELEGRAF_TCP_PORT}
  #   volumes:
  #     - ./services/influxdb-telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
  #   env_file: .env

  # influxdb-kapacitor:
  #   image: kapacitor:latest
  #   ports:
  #     - ${INFLUXDB_KAPACITOR_PORT}:${INFLUXDB_KAPACITOR_PORT}
  #   volumes:
  #     - ./services/influxdb-kapacitor/data:/var/lib/kapacitor
  #   env_file: .env

  # noflo:
  #   build: ./services/noflo
  #   ports:
  #     - ${NOFLO_PORT}:${NOFLO_PORT}
  #   volumes:
  #     - ./services/noflo:/service
  #   env_file: .env

  # arangodb:
  #   image: arangodb
  #   ports:
  #     - ${ARANGO_PORT}:${ARANGO_PORT}
  #   volumes:
  #     - ./services/arangodb/data:/var/lib/arangodb3
  #     - ./services/arangodb/apps:/var/lib/arangodb3-apps
  #   env_file: .env

  # rethinkdb:
  #   build: ./services/rethinkdb
  #   ports:
  #     - ${RETHINKDB_PORT}:${RETHINKDB_PORT}
  #     - ${RETHINKDB_PORT_INTRACLUSTER}:${RETHINKDB_PORT_INTRACLUSTER}
  #     - ${RETHINKDB_PORT_WEB}:${RETHINKDB_PORT_WEB}
  #   volumes:
  #     - ./services/rethinkdb/data:/data
  #   env_file: .env

  # rethinkdb-chateau:
  #   build: ./services/rethinkdb-chateau
  #   ports:
  #     - ${RETHINKDB_CHATEAU_PORT}:${RETHINKDB_CHATEAU_PORT}
  #   volumes:
  #     - ./services/rethinkdb-chateau:/service
  #   env_file: .env
